---
- set_fact:
    settings: >
      {{
      dict(
        mountpoint=(appuio_openshift_localstorage_mountpoint_parent ~ '/' ~ item.key),
        mountopts="defaults",
        owner="root",
        group="root",
        mode="0770",
        seuser="unconfined_u",
        serole="object_r",
        setype="svirt_sandbox_file_t",
        selevel="s0",
        pv_create=True,
        pv_labels=dict(
          hostname=appuio_openshift_localstorage_node_name,
        ),
        pv_storage_class="local",
        pv_reclaim_policy="Retain",
      ) |
      combine(appuio_openshift_localstorage_defaults, recursive=True) |
      combine(item.value, recursive=True) |
      combine(appuio_openshift_localstorage_override, recursive=True) |
      combine(dict(
        size=(item.value.size | human_to_bytes),
      ))
      }}

- debug:
    var: settings

- name: "{{ item.key }}: Create logical volume"
  lvol:
    vg: "{{ settings.lvm_vg | mandatory }}"
    lv: "{{ item.key }}"
    size: "{{ settings.size | int }}B"
    opts: "--wipesignatures y --zero y"

- set_fact:
    dev: "{{ '/dev/' ~ settings.lvm_vg ~ '/' ~ item.key }}"

- name: "{{ item.key }}: Create backing filesystem"
  filesystem:
    fstype: xfs
    dev: "{{ dev }}"
    opts: "-i size=512 -n size=8192"
    resizefs: true

- name: "{{ item.key }}: Determine filesystem UUID"
  command: "/sbin/blkid -c /dev/null -o value -s UUID {{ dev | quote }}"
  changed_when: false
  register: blkid

- set_fact:
    fsuuid: "{{ blkid.stdout | trim }}"

- name: "{{ item.key }}: Mount backing filesystem"
  mount:
    name: "{{ settings.mountpoint }}"
    src: "UUID={{ fsuuid }}"
    fstype: xfs
    opts: "{{ settings.mountopts }}"
    state: mounted

- name: "{{ item.key }}: Set backing filesystem permissions"
  file:
    path: "{{ settings.mountpoint }}"
    state: directory
    owner: "{{ settings.owner }}"
    group: "{{ settings.group }}"
    mode: "{{ settings.mode }}"
    seuser: "{{ settings.seuser }}"
    serole: "{{ settings.serole }}"
    setype: "{{ settings.setype }}"
    selevel: "{{ settings.selevel }}"

- when: "settings.pv_create | default(false)"
  name: Create OpenShift PV object
  run_once: true
  delegate_to: "{{ groups.masters.0 | mandatory }}"
  openshift_resource:
    namespace: default
    patch:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: "{{ item.key }}"
        labels: "{{ settings.pv_labels }}"
        annotations:
          # Required for OpenShift 3.5
          volume.beta.kubernetes.io/storage-class: "{{ settings.pv_storage_class }}"
      spec:
        capacity:
          storage: >-
            {{
            (
              ((settings.size | int) / (1024.0 * 1024)) |
              round(precision=0, method='floor') | int
            ) ~ "Mi"
            }}
        hostPath:
          path: "{{ settings.mountpoint }}"
        nodeAffinity:
          required:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values: ["{{ appuio_openshift_localstorage_node_name }}"]
        accessModes:
          - ReadWriteOnce
          - ReadWriteMany
        storageClassName: "{{ settings.pv_storage_class }}"
        persistentVolumeReclaimPolicy: "{{ settings.pv_reclaim_policy }}"
  tags:
    - openshift-pv
